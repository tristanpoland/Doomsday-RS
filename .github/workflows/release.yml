name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  build-binaries:
    name: Build Binaries
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: linux-amd64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: linux-musl-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: windows-amd64

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install musl-tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get install -y musl-tools
    
    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf doomsday-${{ matrix.artifact_name }}.tar.gz doomsday-server doomsday-cli
        mv doomsday-${{ matrix.artifact_name }}.tar.gz ../../../
    
    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a doomsday-${{ matrix.artifact_name }}.zip doomsday-server.exe doomsday-cli.exe
        mv doomsday-${{ matrix.artifact_name }}.zip ../../../
    
    - name: Upload Release Asset (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./doomsday-${{ matrix.artifact_name }}.tar.gz
        asset_name: doomsday-${{ matrix.artifact_name }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./doomsday-${{ matrix.artifact_name }}.zip
        asset_name: doomsday-${{ matrix.artifact_name }}.zip
        asset_content_type: application/zip

  build-docker:
    name: Build and Push Docker Images
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: doomsdayproject/doomsday-rs
        tags: |
          type=ref,event=tag
          type=raw,value=latest
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max